<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:pu="clr-namespace:Panuon.UI.Silver;assembly=Panuon.UI.Silver" xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic" xmlns:i="http://schemas.microsoft.com/xaml/behaviors">

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:ButtonHelper.HoverBrush" Value="{DynamicResource Scb_Theme06}"/>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
    </Style>

    <!--默认操作按钮-->
    <Style x:Key="Btn_BaseSetButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="#F2B230"/>
    </Style>

    <Style x:Key="Btn_BaseCancelButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="pu:ButtonHelper.HoverBrush" Value="{DynamicResource Scb_Gray01}"/>
    </Style>

    <Style x:Key="Btn_BaseOprateButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:ButtonHelper.HoverBrush" Value="{DynamicResource Scb_Gray01}"/>
    </Style>

    <Style x:Key="Btn_BaseConfirmButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="pu:ButtonHelper.HoverBrush" Value="{DynamicResource Scb_Theme07}"/>
    </Style>

    <Style x:Key="Btn_SmallButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseConfirmButton}">
        <Setter Property="Padding" Value="20,10"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
    </Style>

    <Style x:Key="Btn_NormalButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseConfirmButton}">
        <Setter Property="Padding" Value="20,10"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
    </Style>

    <Style x:Key="Btn_NormalCancelButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseCancelButton}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Padding" Value="20,10"/>
        <Setter Property="Height" Value="42"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
    </Style>

    <Style x:Key="Btn_NormalRedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="20,10"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource Scb_Red10}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="pu:ButtonHelper.HoverBrush" Value="{DynamicResource Scb_Red09}"/>
    </Style>

    <Style x:Key="Btn_NormalTextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseConfirmButton}">
        <Setter Property="Padding" Value="20,10"/>
        <Setter Property="Height" Value="42"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
    </Style>

    <Style x:Key="Btn_SmallTextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseConfirmButton}">
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
    </Style>

    <Style x:Key="Btn_SetButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseSetButton}">
        <Setter Property="Height" Value="54"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Large}"/>
        <Setter Property="Margin" Value="50,35"/>
    </Style>

    <Style x:Key="Btn_CancelButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseCancelButton}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Margin" Value="50,10"/>
    </Style>

    <Style x:Key="Btn_OprateButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseOprateButton}">
        <Setter Property="Height" Value="54"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Large}"/>
        <Setter Property="Margin" Value="50,35"/>
    </Style>

    <Style x:Key="Btn_ConfirmButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseConfirmButton}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Margin" Value="50,10"/>
    </Style>

    <Style x:Key="Btn_PageSelected" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height" Value="32"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_White01}"/>
    </Style>

    <Style x:Key="Btn_PageNoSelected" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height" Value="32"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Background" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray14}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Gray08}"/>
        <Setter Property="pu:ButtonHelper.HoverBrush" Value="{DynamicResource Scb_Gray01}"/>
    </Style>

    <Style x:Key="Btn_SmallCancelButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseCancelButton}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Margin" Value="20,10"/>
    </Style>

    <Style x:Key="Btn_SmallConfirmButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Btn_BaseConfirmButton}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Margin" Value="20,10"/>
    </Style>

    <Style x:Key="Cb_Style" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:CheckBoxHelper.CheckedBorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:CheckBoxHelper.CheckedGlyphBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:CheckBoxHelper.BoxHeight" Value="18"/>
        <Setter Property="pu:CheckBoxHelper.BoxWidth" Value="18"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="Cb_SwitchStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="Background" Value="{DynamicResource Scb_Gray08}"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="pu:CheckBoxHelper.CheckedBackground" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:CheckBoxHelper.CheckedBorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:CheckBoxHelper.CheckBoxStyle" Value="Switch"/>
        <Setter Property="pu:CheckBoxHelper.BoxHeight" Value="20"/>
        <Setter Property="pu:CheckBoxHelper.BoxWidth" Value="30"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="Rb_Style" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Gray05}"/>
        <Setter Property="pu:RadioButtonHelper.CheckedBorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:RadioButtonHelper.CheckedGlyphBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="pu:RadioButtonHelper.BoxHeight" Value="18"/>
        <Setter Property="pu:RadioButtonHelper.BoxWidth" Value="18"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="Rb_TextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <Style x:Key="Btn_PanelNoSelectedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="42"/>
        <Setter Property="Content" Value="1F"/>
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="10"/>
    </Style>

    <Style x:Key="Btn_PanelSelectedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="42"/>
        <Setter Property="Content" Value="1F"/>
        <Setter Property="pu:ButtonHelper.CornerRadius" Value="4"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="10"/>
    </Style>

    <Style x:Key="Btn_NavButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="pu:ButtonHelper.HoverBrush" Value="{DynamicResource Scb_Theme02}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Background" Value="{DynamicResource Scb_Theme02}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Tb_NormalTextInput" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Height" Value="42"/>
        <Setter Property="pu:TextBoxHelper.CanClear" Value="True"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="pu:TextBoxHelper.CornerRadius" Value="4"/>
        <Setter Property="pu:TextBoxHelper.FocusedBorderBrush" Value="{DynamicResource Scb_Gray06}"/>
    </Style>

    <Style x:Key="Tb_NormalDisableText" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Height" Value="42"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="pu:TextBoxHelper.CanClear" Value="False"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="pu:TextBoxHelper.CornerRadius" Value="4"/>
        <Setter Property="pu:TextBoxHelper.FocusedBorderBrush" Value="{DynamicResource Scb_Gray06}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Scb_Gray13}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Tb_SmallTextInput" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="pu:TextBoxHelper.CanClear" Value="True"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="pu:TextBoxHelper.CornerRadius" Value="4"/>
        <Setter Property="pu:TextBoxHelper.FocusedBorderBrush" Value="{DynamicResource Scb_Gray06}"/>
    </Style>

    <Style x:Key="Cb_Normal" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Height" Value="42"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="pu:ComboBoxHelper.CornerRadius" Value="4"/>
        <Setter Property="pu:ComboBoxHelper.ItemsHeight" Value="42"/>
    </Style>

    <Style x:Key="Cb_Small" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="pu:ComboBoxHelper.CornerRadius" Value="4"/>
        <Setter Property="pu:ComboBoxHelper.ItemsHeight" Value="35"/>
    </Style>

    <Style x:Key="Btn_AppendNum" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Scb_Theme08}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="Tbk_NormalTextTitle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
    </Style>

    <Style x:Key="Tbk_NormalText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
    </Style>

    <Style x:Key="Tbk_SmallTextTitle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray10}"/>
    </Style>

    <Style x:Key="Dg_SmallText" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="ColumnHeaderHeight" Value="50"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Foreground" Value="{DynamicResource Scb_Gray12}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource Scb_Gray02}"/>
        <Setter Property="pu:DataGridHelper.HeaderBackground" Value="{DynamicResource Scb_Gray01}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource Scb_White01}"/>
        <Setter Property="pu:DataGridHelper.CellFocusedHightlightBorderBrush" Value="{x:Null}"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="pu:DataGridHelper.HeaderHoverBackground" Value="{DynamicResource Scb_Gray01}"/>
    </Style>


    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FontFamily" Value="{DynamicResource Style_FontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="TextChanged">
                            <i:InvokeCommandAction Command="{Binding DataContext.ComboBoxTextChangedCommand,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=UserControl}}" 
                                                   CommandParameter="{Binding Text, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=TextBox}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="Cb_TextInputComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="FontFamily" Value="{DynamicResource Style_FontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
